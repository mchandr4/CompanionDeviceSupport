// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/android/connecteddevice/calendarsync/common/update.proto

package com.google.android.connecteddevice.calendarsync;

/**
 * <pre>
 * Information about a calendar event instance.
 * Based on
 * https://developer.android.com/reference/android/provider/CalendarContract.Instances.html
 * </pre>
 *
 * Protobuf type {@code aae.calendarsync.Event}
 */
public  final class Event extends
    com.google.protobuf.GeneratedMessageLite<
        Event, Event.Builder> implements
    // @@protoc_insertion_point(message_implements:aae.calendarsync.Event)
    EventOrBuilder {
  private Event() {
    title_ = "";
    key_ = "";
    location_ = "";
    description_ = "";
    organizer_ = "";
    attendees_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Represents a status for a calendar event.
   * </pre>
   *
   * Protobuf enum {@code aae.calendarsync.Event.Status}
   */
  public enum Status
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNSPECIFIED_STATUS = 0;</code>
     */
    UNSPECIFIED_STATUS(0),
    /**
     * <code>TENTATIVE = 1;</code>
     */
    TENTATIVE(1),
    /**
     * <code>CONFIRMED = 2;</code>
     */
    CONFIRMED(2),
    /**
     * <code>CANCELED = 3;</code>
     */
    CANCELED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNSPECIFIED_STATUS = 0;</code>
     */
    public static final int UNSPECIFIED_STATUS_VALUE = 0;
    /**
     * <code>TENTATIVE = 1;</code>
     */
    public static final int TENTATIVE_VALUE = 1;
    /**
     * <code>CONFIRMED = 2;</code>
     */
    public static final int CONFIRMED_VALUE = 2;
    /**
     * <code>CANCELED = 3;</code>
     */
    public static final int CANCELED_VALUE = 3;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Status valueOf(int value) {
      return forNumber(value);
    }

    public static Status forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_STATUS;
        case 1: return TENTATIVE;
        case 2: return CONFIRMED;
        case 3: return CANCELED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Status>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Status> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Status>() {
            @java.lang.Override
            public Status findValueByNumber(int number) {
              return Status.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return StatusVerifier.INSTANCE;
    }

    private static final class StatusVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new StatusVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Status.forNumber(number) != null;
            }
          };

    private final int value;

    private Status(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:aae.calendarsync.Event.Status)
  }

  public static final int TITLE_FIELD_NUMBER = 1;
  private java.lang.String title_;
  /**
   * <pre>
   * The title for the calendar event.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The title.
   */
  @java.lang.Override
  public java.lang.String getTitle() {
    return title_;
  }
  /**
   * <pre>
   * The title for the calendar event.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The bytes for title.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTitleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(title_);
  }
  /**
   * <pre>
   * The title for the calendar event.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @param value The title to set.
   */
  private void setTitle(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    title_ = value;
  }
  /**
   * <pre>
   * The title for the calendar event.
   * </pre>
   *
   * <code>string title = 1;</code>
   */
  private void clearTitle() {
    
    title_ = getDefaultInstance().getTitle();
  }
  /**
   * <pre>
   * The title for the calendar event.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @param value The bytes for title to set.
   */
  private void setTitleBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    title_ = value.toStringUtf8();
    
  }

  public static final int KEY_FIELD_NUMBER = 2;
  private java.lang.String key_;
  /**
   * <pre>
   * The identifier for the calendar event which must be unique for the
   * calendar.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The key.
   */
  @java.lang.Override
  public java.lang.String getKey() {
    return key_;
  }
  /**
   * <pre>
   * The identifier for the calendar event which must be unique for the
   * calendar.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The bytes for key.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeyBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(key_);
  }
  /**
   * <pre>
   * The identifier for the calendar event which must be unique for the
   * calendar.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @param value The key to set.
   */
  private void setKey(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    key_ = value;
  }
  /**
   * <pre>
   * The identifier for the calendar event which must be unique for the
   * calendar.
   * </pre>
   *
   * <code>string key = 2;</code>
   */
  private void clearKey() {
    
    key_ = getDefaultInstance().getKey();
  }
  /**
   * <pre>
   * The identifier for the calendar event which must be unique for the
   * calendar.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @param value The bytes for key to set.
   */
  private void setKeyBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    key_ = value.toStringUtf8();
    
  }

  public static final int BEGIN_TIME_FIELD_NUMBER = 3;
  private com.google.android.connecteddevice.calendarsync.Timestamp beginTime_;
  /**
   * <pre>
   * The begin time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
   */
  @java.lang.Override
  public boolean hasBeginTime() {
    return beginTime_ != null;
  }
  /**
   * <pre>
   * The begin time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Timestamp getBeginTime() {
    return beginTime_ == null ? com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance() : beginTime_;
  }
  /**
   * <pre>
   * The begin time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
   */
  private void setBeginTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
    value.getClass();
  beginTime_ = value;
    
    }
  /**
   * <pre>
   * The begin time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeBeginTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
    value.getClass();
  if (beginTime_ != null &&
        beginTime_ != com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance()) {
      beginTime_ =
        com.google.android.connecteddevice.calendarsync.Timestamp.newBuilder(beginTime_).mergeFrom(value).buildPartial();
    } else {
      beginTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The begin time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
   */
  private void clearBeginTime() {  beginTime_ = null;
    
  }

  public static final int END_TIME_FIELD_NUMBER = 4;
  private com.google.android.connecteddevice.calendarsync.Timestamp endTime_;
  /**
   * <pre>
   * The end time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
   */
  @java.lang.Override
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * The end time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Timestamp getEndTime() {
    return endTime_ == null ? com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * The end time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
   */
  private void setEndTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
    value.getClass();
  endTime_ = value;
    
    }
  /**
   * <pre>
   * The end time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeEndTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
    value.getClass();
  if (endTime_ != null &&
        endTime_ != com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance()) {
      endTime_ =
        com.google.android.connecteddevice.calendarsync.Timestamp.newBuilder(endTime_).mergeFrom(value).buildPartial();
    } else {
      endTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The end time of the calendar event instance.
   * </pre>
   *
   * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
   */
  private void clearEndTime() {  endTime_ = null;
    
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 5;
  private com.google.android.connecteddevice.calendarsync.TimeZone timeZone_;
  /**
   * <pre>
   * The time zone for the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
   */
  @java.lang.Override
  public boolean hasTimeZone() {
    return timeZone_ != null;
  }
  /**
   * <pre>
   * The time zone for the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.TimeZone getTimeZone() {
    return timeZone_ == null ? com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance() : timeZone_;
  }
  /**
   * <pre>
   * The time zone for the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
   */
  private void setTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  timeZone_ = value;
    
    }
  /**
   * <pre>
   * The time zone for the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  if (timeZone_ != null &&
        timeZone_ != com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance()) {
      timeZone_ =
        com.google.android.connecteddevice.calendarsync.TimeZone.newBuilder(timeZone_).mergeFrom(value).buildPartial();
    } else {
      timeZone_ = value;
    }
    
  }
  /**
   * <pre>
   * The time zone for the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
   */
  private void clearTimeZone() {  timeZone_ = null;
    
  }

  public static final int END_TIME_ZONE_FIELD_NUMBER = 6;
  private com.google.android.connecteddevice.calendarsync.TimeZone endTimeZone_;
  /**
   * <pre>
   * The time zone for the end time of the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
   */
  @java.lang.Override
  public boolean hasEndTimeZone() {
    return endTimeZone_ != null;
  }
  /**
   * <pre>
   * The time zone for the end time of the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.TimeZone getEndTimeZone() {
    return endTimeZone_ == null ? com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance() : endTimeZone_;
  }
  /**
   * <pre>
   * The time zone for the end time of the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
   */
  private void setEndTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  endTimeZone_ = value;
    
    }
  /**
   * <pre>
   * The time zone for the end time of the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeEndTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  if (endTimeZone_ != null &&
        endTimeZone_ != com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance()) {
      endTimeZone_ =
        com.google.android.connecteddevice.calendarsync.TimeZone.newBuilder(endTimeZone_).mergeFrom(value).buildPartial();
    } else {
      endTimeZone_ = value;
    }
    
  }
  /**
   * <pre>
   * The time zone for the end time of the calendar event.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
   */
  private void clearEndTimeZone() {  endTimeZone_ = null;
    
  }

  public static final int IS_ALL_DAY_FIELD_NUMBER = 7;
  private boolean isAllDay_;
  /**
   * <pre>
   * A boolean value that indicates whether an event is an all-day event.
   * </pre>
   *
   * <code>bool is_all_day = 7;</code>
   * @return The isAllDay.
   */
  @java.lang.Override
  public boolean getIsAllDay() {
    return isAllDay_;
  }
  /**
   * <pre>
   * A boolean value that indicates whether an event is an all-day event.
   * </pre>
   *
   * <code>bool is_all_day = 7;</code>
   * @param value The isAllDay to set.
   */
  private void setIsAllDay(boolean value) {
    
    isAllDay_ = value;
  }
  /**
   * <pre>
   * A boolean value that indicates whether an event is an all-day event.
   * </pre>
   *
   * <code>bool is_all_day = 7;</code>
   */
  private void clearIsAllDay() {
    
    isAllDay_ = false;
  }

  public static final int LOCATION_FIELD_NUMBER = 8;
  private java.lang.String location_;
  /**
   * <pre>
   * The location associated with the calendar event.
   * </pre>
   *
   * <code>string location = 8;</code>
   * @return The location.
   */
  @java.lang.Override
  public java.lang.String getLocation() {
    return location_;
  }
  /**
   * <pre>
   * The location associated with the calendar event.
   * </pre>
   *
   * <code>string location = 8;</code>
   * @return The bytes for location.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLocationBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(location_);
  }
  /**
   * <pre>
   * The location associated with the calendar event.
   * </pre>
   *
   * <code>string location = 8;</code>
   * @param value The location to set.
   */
  private void setLocation(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    location_ = value;
  }
  /**
   * <pre>
   * The location associated with the calendar event.
   * </pre>
   *
   * <code>string location = 8;</code>
   */
  private void clearLocation() {
    
    location_ = getDefaultInstance().getLocation();
  }
  /**
   * <pre>
   * The location associated with the calendar event.
   * </pre>
   *
   * <code>string location = 8;</code>
   * @param value The bytes for location to set.
   */
  private void setLocationBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    location_ = value.toStringUtf8();
    
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 9;
  private java.lang.String description_;
  /**
   * <pre>
   * The description of the event.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * The description of the event.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * The description of the event.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @param value The description to set.
   */
  private void setDescription(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    description_ = value;
  }
  /**
   * <pre>
   * The description of the event.
   * </pre>
   *
   * <code>string description = 9;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * The description of the event.
   * </pre>
   *
   * <code>string description = 9;</code>
   * @param value The bytes for description to set.
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    description_ = value.toStringUtf8();
    
  }

  public static final int COLOR_FIELD_NUMBER = 10;
  private com.google.android.connecteddevice.calendarsync.Color color_;
  /**
   * <pre>
   * A secondary color for the event.
   * Set only if it differs from the calendar color.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 10;</code>
   */
  @java.lang.Override
  public boolean hasColor() {
    return color_ != null;
  }
  /**
   * <pre>
   * A secondary color for the event.
   * Set only if it differs from the calendar color.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 10;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Color getColor() {
    return color_ == null ? com.google.android.connecteddevice.calendarsync.Color.getDefaultInstance() : color_;
  }
  /**
   * <pre>
   * A secondary color for the event.
   * Set only if it differs from the calendar color.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 10;</code>
   */
  private void setColor(com.google.android.connecteddevice.calendarsync.Color value) {
    value.getClass();
  color_ = value;
    
    }
  /**
   * <pre>
   * A secondary color for the event.
   * Set only if it differs from the calendar color.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 10;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeColor(com.google.android.connecteddevice.calendarsync.Color value) {
    value.getClass();
  if (color_ != null &&
        color_ != com.google.android.connecteddevice.calendarsync.Color.getDefaultInstance()) {
      color_ =
        com.google.android.connecteddevice.calendarsync.Color.newBuilder(color_).mergeFrom(value).buildPartial();
    } else {
      color_ = value;
    }
    
  }
  /**
   * <pre>
   * A secondary color for the event.
   * Set only if it differs from the calendar color.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 10;</code>
   */
  private void clearColor() {  color_ = null;
    
  }

  public static final int STATUS_FIELD_NUMBER = 11;
  private int status_;
  /**
   * <code>.aae.calendarsync.Event.Status status = 11;</code>
   * @return The enum numeric value on the wire for status.
   */
  @java.lang.Override
  public int getStatusValue() {
    return status_;
  }
  /**
   * <code>.aae.calendarsync.Event.Status status = 11;</code>
   * @return The status.
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Event.Status getStatus() {
    com.google.android.connecteddevice.calendarsync.Event.Status result = com.google.android.connecteddevice.calendarsync.Event.Status.forNumber(status_);
    return result == null ? com.google.android.connecteddevice.calendarsync.Event.Status.UNRECOGNIZED : result;
  }
  /**
   * <code>.aae.calendarsync.Event.Status status = 11;</code>
   * @param value The enum numeric value on the wire for status to set.
   */
  private void setStatusValue(int value) {
      status_ = value;
  }
  /**
   * <code>.aae.calendarsync.Event.Status status = 11;</code>
   * @param value The status to set.
   */
  private void setStatus(com.google.android.connecteddevice.calendarsync.Event.Status value) {
    status_ = value.getNumber();
    
  }
  /**
   * <code>.aae.calendarsync.Event.Status status = 11;</code>
   */
  private void clearStatus() {
    
    status_ = 0;
  }

  public static final int ORGANIZER_FIELD_NUMBER = 12;
  private java.lang.String organizer_;
  /**
   * <pre>
   * The organizer associated with the calendar event.
   * This is typically an email address.
   * </pre>
   *
   * <code>string organizer = 12;</code>
   * @return The organizer.
   */
  @java.lang.Override
  public java.lang.String getOrganizer() {
    return organizer_;
  }
  /**
   * <pre>
   * The organizer associated with the calendar event.
   * This is typically an email address.
   * </pre>
   *
   * <code>string organizer = 12;</code>
   * @return The bytes for organizer.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOrganizerBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(organizer_);
  }
  /**
   * <pre>
   * The organizer associated with the calendar event.
   * This is typically an email address.
   * </pre>
   *
   * <code>string organizer = 12;</code>
   * @param value The organizer to set.
   */
  private void setOrganizer(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    organizer_ = value;
  }
  /**
   * <pre>
   * The organizer associated with the calendar event.
   * This is typically an email address.
   * </pre>
   *
   * <code>string organizer = 12;</code>
   */
  private void clearOrganizer() {
    
    organizer_ = getDefaultInstance().getOrganizer();
  }
  /**
   * <pre>
   * The organizer associated with the calendar event.
   * This is typically an email address.
   * </pre>
   *
   * <code>string organizer = 12;</code>
   * @param value The bytes for organizer to set.
   */
  private void setOrganizerBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    organizer_ = value.toStringUtf8();
    
  }

  public static final int ATTENDEES_FIELD_NUMBER = 13;
  private com.google.protobuf.Internal.ProtobufList<com.google.android.connecteddevice.calendarsync.Attendee> attendees_;
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.android.connecteddevice.calendarsync.Attendee> getAttendeesList() {
    return attendees_;
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  public java.util.List<? extends com.google.android.connecteddevice.calendarsync.AttendeeOrBuilder> 
      getAttendeesOrBuilderList() {
    return attendees_;
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  @java.lang.Override
  public int getAttendeesCount() {
    return attendees_.size();
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Attendee getAttendees(int index) {
    return attendees_.get(index);
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  public com.google.android.connecteddevice.calendarsync.AttendeeOrBuilder getAttendeesOrBuilder(
      int index) {
    return attendees_.get(index);
  }
  private void ensureAttendeesIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.android.connecteddevice.calendarsync.Attendee> tmp = attendees_;
    if (!tmp.isModifiable()) {
      attendees_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void setAttendees(
      int index, com.google.android.connecteddevice.calendarsync.Attendee value) {
    value.getClass();
  ensureAttendeesIsMutable();
    attendees_.set(index, value);
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void addAttendees(com.google.android.connecteddevice.calendarsync.Attendee value) {
    value.getClass();
  ensureAttendeesIsMutable();
    attendees_.add(value);
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void addAttendees(
      int index, com.google.android.connecteddevice.calendarsync.Attendee value) {
    value.getClass();
  ensureAttendeesIsMutable();
    attendees_.add(index, value);
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void addAllAttendees(
      java.lang.Iterable<? extends com.google.android.connecteddevice.calendarsync.Attendee> values) {
    ensureAttendeesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, attendees_);
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void clearAttendees() {
    attendees_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The attendees associated with the calendar event.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
   */
  private void removeAttendees(int index) {
    ensureAttendeesIsMutable();
    attendees_.remove(index);
  }

  public static final int ACTION_FIELD_NUMBER = 16;
  private int action_;
  /**
   * <code>.aae.calendarsync.UpdateAction action = 16;</code>
   * @return The enum numeric value on the wire for action.
   */
  @java.lang.Override
  public int getActionValue() {
    return action_;
  }
  /**
   * <code>.aae.calendarsync.UpdateAction action = 16;</code>
   * @return The action.
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.UpdateAction getAction() {
    com.google.android.connecteddevice.calendarsync.UpdateAction result = com.google.android.connecteddevice.calendarsync.UpdateAction.forNumber(action_);
    return result == null ? com.google.android.connecteddevice.calendarsync.UpdateAction.UNRECOGNIZED : result;
  }
  /**
   * <code>.aae.calendarsync.UpdateAction action = 16;</code>
   * @param value The enum numeric value on the wire for action to set.
   */
  private void setActionValue(int value) {
      action_ = value;
  }
  /**
   * <code>.aae.calendarsync.UpdateAction action = 16;</code>
   * @param value The action to set.
   */
  private void setAction(com.google.android.connecteddevice.calendarsync.UpdateAction value) {
    action_ = value.getNumber();
    
  }
  /**
   * <code>.aae.calendarsync.UpdateAction action = 16;</code>
   */
  private void clearAction() {
    
    action_ = 0;
  }

  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Event parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.android.connecteddevice.calendarsync.Event prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Information about a calendar event instance.
   * Based on
   * https://developer.android.com/reference/android/provider/CalendarContract.Instances.html
   * </pre>
   *
   * Protobuf type {@code aae.calendarsync.Event}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.android.connecteddevice.calendarsync.Event, Builder> implements
      // @@protoc_insertion_point(builder_implements:aae.calendarsync.Event)
      com.google.android.connecteddevice.calendarsync.EventOrBuilder {
    // Construct using com.google.android.connecteddevice.calendarsync.Event.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The title for the calendar event.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return The title.
     */
    @java.lang.Override
    public java.lang.String getTitle() {
      return instance.getTitle();
    }
    /**
     * <pre>
     * The title for the calendar event.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return The bytes for title.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTitleBytes() {
      return instance.getTitleBytes();
    }
    /**
     * <pre>
     * The title for the calendar event.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @param value The title to set.
     * @return This builder for chaining.
     */
    public Builder setTitle(
        java.lang.String value) {
      copyOnWrite();
      instance.setTitle(value);
      return this;
    }
    /**
     * <pre>
     * The title for the calendar event.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTitle() {
      copyOnWrite();
      instance.clearTitle();
      return this;
    }
    /**
     * <pre>
     * The title for the calendar event.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @param value The bytes for title to set.
     * @return This builder for chaining.
     */
    public Builder setTitleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTitleBytes(value);
      return this;
    }

    /**
     * <pre>
     * The identifier for the calendar event which must be unique for the
     * calendar.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      return instance.getKey();
    }
    /**
     * <pre>
     * The identifier for the calendar event which must be unique for the
     * calendar.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      return instance.getKeyBytes();
    }
    /**
     * <pre>
     * The identifier for the calendar event which must be unique for the
     * calendar.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @param value The key to set.
     * @return This builder for chaining.
     */
    public Builder setKey(
        java.lang.String value) {
      copyOnWrite();
      instance.setKey(value);
      return this;
    }
    /**
     * <pre>
     * The identifier for the calendar event which must be unique for the
     * calendar.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearKey() {
      copyOnWrite();
      instance.clearKey();
      return this;
    }
    /**
     * <pre>
     * The identifier for the calendar event which must be unique for the
     * calendar.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @param value The bytes for key to set.
     * @return This builder for chaining.
     */
    public Builder setKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    @java.lang.Override
    public boolean hasBeginTime() {
      return instance.hasBeginTime();
    }
    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Timestamp getBeginTime() {
      return instance.getBeginTime();
    }
    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    public Builder setBeginTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      copyOnWrite();
      instance.setBeginTime(value);
      return this;
      }
    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    public Builder setBeginTime(
        com.google.android.connecteddevice.calendarsync.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setBeginTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    public Builder mergeBeginTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      copyOnWrite();
      instance.mergeBeginTime(value);
      return this;
    }
    /**
     * <pre>
     * The begin time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp begin_time = 3;</code>
     */
    public Builder clearBeginTime() {  copyOnWrite();
      instance.clearBeginTime();
      return this;
    }

    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    @java.lang.Override
    public boolean hasEndTime() {
      return instance.hasEndTime();
    }
    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Timestamp getEndTime() {
      return instance.getEndTime();
    }
    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    public Builder setEndTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      copyOnWrite();
      instance.setEndTime(value);
      return this;
      }
    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    public Builder setEndTime(
        com.google.android.connecteddevice.calendarsync.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setEndTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    public Builder mergeEndTime(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      copyOnWrite();
      instance.mergeEndTime(value);
      return this;
    }
    /**
     * <pre>
     * The end time of the calendar event instance.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp end_time = 4;</code>
     */
    public Builder clearEndTime() {  copyOnWrite();
      instance.clearEndTime();
      return this;
    }

    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    @java.lang.Override
    public boolean hasTimeZone() {
      return instance.hasTimeZone();
    }
    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.TimeZone getTimeZone() {
      return instance.getTimeZone();
    }
    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    public Builder setTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.setTimeZone(value);
      return this;
      }
    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    public Builder setTimeZone(
        com.google.android.connecteddevice.calendarsync.TimeZone.Builder builderForValue) {
      copyOnWrite();
      instance.setTimeZone(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    public Builder mergeTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.mergeTimeZone(value);
      return this;
    }
    /**
     * <pre>
     * The time zone for the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 5;</code>
     */
    public Builder clearTimeZone() {  copyOnWrite();
      instance.clearTimeZone();
      return this;
    }

    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    @java.lang.Override
    public boolean hasEndTimeZone() {
      return instance.hasEndTimeZone();
    }
    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.TimeZone getEndTimeZone() {
      return instance.getEndTimeZone();
    }
    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    public Builder setEndTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.setEndTimeZone(value);
      return this;
      }
    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    public Builder setEndTimeZone(
        com.google.android.connecteddevice.calendarsync.TimeZone.Builder builderForValue) {
      copyOnWrite();
      instance.setEndTimeZone(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    public Builder mergeEndTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.mergeEndTimeZone(value);
      return this;
    }
    /**
     * <pre>
     * The time zone for the end time of the calendar event.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone end_time_zone = 6;</code>
     */
    public Builder clearEndTimeZone() {  copyOnWrite();
      instance.clearEndTimeZone();
      return this;
    }

    /**
     * <pre>
     * A boolean value that indicates whether an event is an all-day event.
     * </pre>
     *
     * <code>bool is_all_day = 7;</code>
     * @return The isAllDay.
     */
    @java.lang.Override
    public boolean getIsAllDay() {
      return instance.getIsAllDay();
    }
    /**
     * <pre>
     * A boolean value that indicates whether an event is an all-day event.
     * </pre>
     *
     * <code>bool is_all_day = 7;</code>
     * @param value The isAllDay to set.
     * @return This builder for chaining.
     */
    public Builder setIsAllDay(boolean value) {
      copyOnWrite();
      instance.setIsAllDay(value);
      return this;
    }
    /**
     * <pre>
     * A boolean value that indicates whether an event is an all-day event.
     * </pre>
     *
     * <code>bool is_all_day = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearIsAllDay() {
      copyOnWrite();
      instance.clearIsAllDay();
      return this;
    }

    /**
     * <pre>
     * The location associated with the calendar event.
     * </pre>
     *
     * <code>string location = 8;</code>
     * @return The location.
     */
    @java.lang.Override
    public java.lang.String getLocation() {
      return instance.getLocation();
    }
    /**
     * <pre>
     * The location associated with the calendar event.
     * </pre>
     *
     * <code>string location = 8;</code>
     * @return The bytes for location.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLocationBytes() {
      return instance.getLocationBytes();
    }
    /**
     * <pre>
     * The location associated with the calendar event.
     * </pre>
     *
     * <code>string location = 8;</code>
     * @param value The location to set.
     * @return This builder for chaining.
     */
    public Builder setLocation(
        java.lang.String value) {
      copyOnWrite();
      instance.setLocation(value);
      return this;
    }
    /**
     * <pre>
     * The location associated with the calendar event.
     * </pre>
     *
     * <code>string location = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearLocation() {
      copyOnWrite();
      instance.clearLocation();
      return this;
    }
    /**
     * <pre>
     * The location associated with the calendar event.
     * </pre>
     *
     * <code>string location = 8;</code>
     * @param value The bytes for location to set.
     * @return This builder for chaining.
     */
    public Builder setLocationBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLocationBytes(value);
      return this;
    }

    /**
     * <pre>
     * The description of the event.
     * </pre>
     *
     * <code>string description = 9;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * The description of the event.
     * </pre>
     *
     * <code>string description = 9;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * The description of the event.
     * </pre>
     *
     * <code>string description = 9;</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * The description of the event.
     * </pre>
     *
     * <code>string description = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * The description of the event.
     * </pre>
     *
     * <code>string description = 9;</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    @java.lang.Override
    public boolean hasColor() {
      return instance.hasColor();
    }
    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Color getColor() {
      return instance.getColor();
    }
    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    public Builder setColor(com.google.android.connecteddevice.calendarsync.Color value) {
      copyOnWrite();
      instance.setColor(value);
      return this;
      }
    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    public Builder setColor(
        com.google.android.connecteddevice.calendarsync.Color.Builder builderForValue) {
      copyOnWrite();
      instance.setColor(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    public Builder mergeColor(com.google.android.connecteddevice.calendarsync.Color value) {
      copyOnWrite();
      instance.mergeColor(value);
      return this;
    }
    /**
     * <pre>
     * A secondary color for the event.
     * Set only if it differs from the calendar color.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 10;</code>
     */
    public Builder clearColor() {  copyOnWrite();
      instance.clearColor();
      return this;
    }

    /**
     * <code>.aae.calendarsync.Event.Status status = 11;</code>
     * @return The enum numeric value on the wire for status.
     */
    @java.lang.Override
    public int getStatusValue() {
      return instance.getStatusValue();
    }
    /**
     * <code>.aae.calendarsync.Event.Status status = 11;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatusValue(int value) {
      copyOnWrite();
      instance.setStatusValue(value);
      return this;
    }
    /**
     * <code>.aae.calendarsync.Event.Status status = 11;</code>
     * @return The status.
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Event.Status getStatus() {
      return instance.getStatus();
    }
    /**
     * <code>.aae.calendarsync.Event.Status status = 11;</code>
     * @param value The enum numeric value on the wire for status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(com.google.android.connecteddevice.calendarsync.Event.Status value) {
      copyOnWrite();
      instance.setStatus(value);
      return this;
    }
    /**
     * <code>.aae.calendarsync.Event.Status status = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      copyOnWrite();
      instance.clearStatus();
      return this;
    }

    /**
     * <pre>
     * The organizer associated with the calendar event.
     * This is typically an email address.
     * </pre>
     *
     * <code>string organizer = 12;</code>
     * @return The organizer.
     */
    @java.lang.Override
    public java.lang.String getOrganizer() {
      return instance.getOrganizer();
    }
    /**
     * <pre>
     * The organizer associated with the calendar event.
     * This is typically an email address.
     * </pre>
     *
     * <code>string organizer = 12;</code>
     * @return The bytes for organizer.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOrganizerBytes() {
      return instance.getOrganizerBytes();
    }
    /**
     * <pre>
     * The organizer associated with the calendar event.
     * This is typically an email address.
     * </pre>
     *
     * <code>string organizer = 12;</code>
     * @param value The organizer to set.
     * @return This builder for chaining.
     */
    public Builder setOrganizer(
        java.lang.String value) {
      copyOnWrite();
      instance.setOrganizer(value);
      return this;
    }
    /**
     * <pre>
     * The organizer associated with the calendar event.
     * This is typically an email address.
     * </pre>
     *
     * <code>string organizer = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearOrganizer() {
      copyOnWrite();
      instance.clearOrganizer();
      return this;
    }
    /**
     * <pre>
     * The organizer associated with the calendar event.
     * This is typically an email address.
     * </pre>
     *
     * <code>string organizer = 12;</code>
     * @param value The bytes for organizer to set.
     * @return This builder for chaining.
     */
    public Builder setOrganizerBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setOrganizerBytes(value);
      return this;
    }

    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.android.connecteddevice.calendarsync.Attendee> getAttendeesList() {
      return java.util.Collections.unmodifiableList(
          instance.getAttendeesList());
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    @java.lang.Override
    public int getAttendeesCount() {
      return instance.getAttendeesCount();
    }/**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Attendee getAttendees(int index) {
      return instance.getAttendees(index);
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder setAttendees(
        int index, com.google.android.connecteddevice.calendarsync.Attendee value) {
      copyOnWrite();
      instance.setAttendees(index, value);
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder setAttendees(
        int index, com.google.android.connecteddevice.calendarsync.Attendee.Builder builderForValue) {
      copyOnWrite();
      instance.setAttendees(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder addAttendees(com.google.android.connecteddevice.calendarsync.Attendee value) {
      copyOnWrite();
      instance.addAttendees(value);
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder addAttendees(
        int index, com.google.android.connecteddevice.calendarsync.Attendee value) {
      copyOnWrite();
      instance.addAttendees(index, value);
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder addAttendees(
        com.google.android.connecteddevice.calendarsync.Attendee.Builder builderForValue) {
      copyOnWrite();
      instance.addAttendees(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder addAttendees(
        int index, com.google.android.connecteddevice.calendarsync.Attendee.Builder builderForValue) {
      copyOnWrite();
      instance.addAttendees(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder addAllAttendees(
        java.lang.Iterable<? extends com.google.android.connecteddevice.calendarsync.Attendee> values) {
      copyOnWrite();
      instance.addAllAttendees(values);
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder clearAttendees() {
      copyOnWrite();
      instance.clearAttendees();
      return this;
    }
    /**
     * <pre>
     * The attendees associated with the calendar event.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Attendee attendees = 13;</code>
     */
    public Builder removeAttendees(int index) {
      copyOnWrite();
      instance.removeAttendees(index);
      return this;
    }

    /**
     * <code>.aae.calendarsync.UpdateAction action = 16;</code>
     * @return The enum numeric value on the wire for action.
     */
    @java.lang.Override
    public int getActionValue() {
      return instance.getActionValue();
    }
    /**
     * <code>.aae.calendarsync.UpdateAction action = 16;</code>
     * @param value The action to set.
     * @return This builder for chaining.
     */
    public Builder setActionValue(int value) {
      copyOnWrite();
      instance.setActionValue(value);
      return this;
    }
    /**
     * <code>.aae.calendarsync.UpdateAction action = 16;</code>
     * @return The action.
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.UpdateAction getAction() {
      return instance.getAction();
    }
    /**
     * <code>.aae.calendarsync.UpdateAction action = 16;</code>
     * @param value The enum numeric value on the wire for action to set.
     * @return This builder for chaining.
     */
    public Builder setAction(com.google.android.connecteddevice.calendarsync.UpdateAction value) {
      copyOnWrite();
      instance.setAction(value);
      return this;
    }
    /**
     * <code>.aae.calendarsync.UpdateAction action = 16;</code>
     * @return This builder for chaining.
     */
    public Builder clearAction() {
      copyOnWrite();
      instance.clearAction();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:aae.calendarsync.Event)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.android.connecteddevice.calendarsync.Event();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "title_",
            "key_",
            "beginTime_",
            "endTime_",
            "timeZone_",
            "endTimeZone_",
            "isAllDay_",
            "location_",
            "description_",
            "color_",
            "status_",
            "organizer_",
            "attendees_",
            com.google.android.connecteddevice.calendarsync.Attendee.class,
            "action_",
          };
          java.lang.String info =
              "\u0000\u000e\u0000\u0000\u0001\u0010\u000e\u0000\u0001\u0000\u0001\u0208\u0002\u0208" +
              "\u0003\t\u0004\t\u0005\t\u0006\t\u0007\u0007\b\u0208\t\u0208\n\t\u000b\f\f\u0208" +
              "\r\u001b\u0010\f";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.android.connecteddevice.calendarsync.Event> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.android.connecteddevice.calendarsync.Event.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.android.connecteddevice.calendarsync.Event>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:aae.calendarsync.Event)
  private static final com.google.android.connecteddevice.calendarsync.Event DEFAULT_INSTANCE;
  static {
    Event defaultInstance = new Event();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Event.class, defaultInstance);
  }

  public static com.google.android.connecteddevice.calendarsync.Event getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Event> PARSER;

  public static com.google.protobuf.Parser<Event> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

