// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/android/connecteddevice/calendarsync/common/update.proto

package com.google.android.connecteddevice.calendarsync;

/**
 * <pre>
 * Information about a calendar.
 * Based on
 * https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html
 * </pre>
 *
 * Protobuf type {@code aae.calendarsync.Calendar}
 */
public  final class Calendar extends
    com.google.protobuf.GeneratedMessageLite<
        Calendar, Calendar.Builder> implements
    // @@protoc_insertion_point(message_implements:aae.calendarsync.Calendar)
    CalendarOrBuilder {
  private Calendar() {
    title_ = "";
    key_ = "";
    events_ = emptyProtobufList();
    accountName_ = "";
  }
  public interface TimeRangeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aae.calendarsync.Calendar.TimeRange)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     * @return Whether the from field is set.
     */
    boolean hasFrom();
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     * @return The from.
     */
    com.google.android.connecteddevice.calendarsync.Timestamp getFrom();

    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     * @return Whether the to field is set.
     */
    boolean hasTo();
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     * @return The to.
     */
    com.google.android.connecteddevice.calendarsync.Timestamp getTo();
  }
  /**
   * <pre>
   * The range of begin times of the events contained in this message.
   * </pre>
   *
   * Protobuf type {@code aae.calendarsync.Calendar.TimeRange}
   */
  public  static final class TimeRange extends
      com.google.protobuf.GeneratedMessageLite<
          TimeRange, TimeRange.Builder> implements
      // @@protoc_insertion_point(message_implements:aae.calendarsync.Calendar.TimeRange)
      TimeRangeOrBuilder {
    private TimeRange() {
    }
    public static final int FROM_FIELD_NUMBER = 1;
    private com.google.android.connecteddevice.calendarsync.Timestamp from_;
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     */
    @java.lang.Override
    public boolean hasFrom() {
      return from_ != null;
    }
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Timestamp getFrom() {
      return from_ == null ? com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance() : from_;
    }
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     */
    private void setFrom(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      value.getClass();
  from_ = value;
      
      }
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFrom(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      value.getClass();
  if (from_ != null &&
          from_ != com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance()) {
        from_ =
          com.google.android.connecteddevice.calendarsync.Timestamp.newBuilder(from_).mergeFrom(value).buildPartial();
      } else {
        from_ = value;
      }
      
    }
    /**
     * <pre>
     * The earliest begin time of the events, inclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp from = 1;</code>
     */
    private void clearFrom() {  from_ = null;
      
    }

    public static final int TO_FIELD_NUMBER = 2;
    private com.google.android.connecteddevice.calendarsync.Timestamp to_;
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     */
    @java.lang.Override
    public boolean hasTo() {
      return to_ != null;
    }
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Timestamp getTo() {
      return to_ == null ? com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance() : to_;
    }
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     */
    private void setTo(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      value.getClass();
  to_ = value;
      
      }
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTo(com.google.android.connecteddevice.calendarsync.Timestamp value) {
      value.getClass();
  if (to_ != null &&
          to_ != com.google.android.connecteddevice.calendarsync.Timestamp.getDefaultInstance()) {
        to_ =
          com.google.android.connecteddevice.calendarsync.Timestamp.newBuilder(to_).mergeFrom(value).buildPartial();
      } else {
        to_ = value;
      }
      
    }
    /**
     * <pre>
     * The latest begin time of the events, exclusive.
     * </pre>
     *
     * <code>.aae.calendarsync.Timestamp to = 2;</code>
     */
    private void clearTo() {  to_ = null;
      
    }

    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(com.google.android.connecteddevice.calendarsync.Calendar.TimeRange prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * The range of begin times of the events contained in this message.
     * </pre>
     *
     * Protobuf type {@code aae.calendarsync.Calendar.TimeRange}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.google.android.connecteddevice.calendarsync.Calendar.TimeRange, Builder> implements
        // @@protoc_insertion_point(builder_implements:aae.calendarsync.Calendar.TimeRange)
        com.google.android.connecteddevice.calendarsync.Calendar.TimeRangeOrBuilder {
      // Construct using com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      @java.lang.Override
      public boolean hasFrom() {
        return instance.hasFrom();
      }
      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      @java.lang.Override
      public com.google.android.connecteddevice.calendarsync.Timestamp getFrom() {
        return instance.getFrom();
      }
      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      public Builder setFrom(com.google.android.connecteddevice.calendarsync.Timestamp value) {
        copyOnWrite();
        instance.setFrom(value);
        return this;
        }
      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      public Builder setFrom(
          com.google.android.connecteddevice.calendarsync.Timestamp.Builder builderForValue) {
        copyOnWrite();
        instance.setFrom(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      public Builder mergeFrom(com.google.android.connecteddevice.calendarsync.Timestamp value) {
        copyOnWrite();
        instance.mergeFrom(value);
        return this;
      }
      /**
       * <pre>
       * The earliest begin time of the events, inclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp from = 1;</code>
       */
      public Builder clearFrom() {  copyOnWrite();
        instance.clearFrom();
        return this;
      }

      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      @java.lang.Override
      public boolean hasTo() {
        return instance.hasTo();
      }
      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      @java.lang.Override
      public com.google.android.connecteddevice.calendarsync.Timestamp getTo() {
        return instance.getTo();
      }
      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      public Builder setTo(com.google.android.connecteddevice.calendarsync.Timestamp value) {
        copyOnWrite();
        instance.setTo(value);
        return this;
        }
      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      public Builder setTo(
          com.google.android.connecteddevice.calendarsync.Timestamp.Builder builderForValue) {
        copyOnWrite();
        instance.setTo(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      public Builder mergeTo(com.google.android.connecteddevice.calendarsync.Timestamp value) {
        copyOnWrite();
        instance.mergeTo(value);
        return this;
      }
      /**
       * <pre>
       * The latest begin time of the events, exclusive.
       * </pre>
       *
       * <code>.aae.calendarsync.Timestamp to = 2;</code>
       */
      public Builder clearTo() {  copyOnWrite();
        instance.clearTo();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:aae.calendarsync.Calendar.TimeRange)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.google.android.connecteddevice.calendarsync.Calendar.TimeRange();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "from_",
              "to_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\t\u0002\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<com.google.android.connecteddevice.calendarsync.Calendar.TimeRange> parser = PARSER;
          if (parser == null) {
            synchronized (com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<com.google.android.connecteddevice.calendarsync.Calendar.TimeRange>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:aae.calendarsync.Calendar.TimeRange)
    private static final com.google.android.connecteddevice.calendarsync.Calendar.TimeRange DEFAULT_INSTANCE;
    static {
      TimeRange defaultInstance = new TimeRange();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TimeRange.class, defaultInstance);
    }

    public static com.google.android.connecteddevice.calendarsync.Calendar.TimeRange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TimeRange> PARSER;

    public static com.google.protobuf.Parser<TimeRange> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int TITLE_FIELD_NUMBER = 1;
  private java.lang.String title_;
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The title.
   */
  @java.lang.Override
  public java.lang.String getTitle() {
    return title_;
  }
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The bytes for title.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTitleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(title_);
  }
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @param value The title to set.
   */
  private void setTitle(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    title_ = value;
  }
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   */
  private void clearTitle() {
    
    title_ = getDefaultInstance().getTitle();
  }
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @param value The bytes for title to set.
   */
  private void setTitleBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    title_ = value.toStringUtf8();
    
  }

  public static final int KEY_FIELD_NUMBER = 2;
  private java.lang.String key_;
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The key.
   */
  @java.lang.Override
  public java.lang.String getKey() {
    return key_;
  }
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The bytes for key.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getKeyBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(key_);
  }
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @param value The key to set.
   */
  private void setKey(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    key_ = value;
  }
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   */
  private void clearKey() {
    
    key_ = getDefaultInstance().getKey();
  }
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @param value The bytes for key to set.
   */
  private void setKeyBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    key_ = value.toStringUtf8();
    
  }

  public static final int COLOR_FIELD_NUMBER = 3;
  private com.google.android.connecteddevice.calendarsync.Color color_;
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   */
  @java.lang.Override
  public boolean hasColor() {
    return color_ != null;
  }
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Color getColor() {
    return color_ == null ? com.google.android.connecteddevice.calendarsync.Color.getDefaultInstance() : color_;
  }
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   */
  private void setColor(com.google.android.connecteddevice.calendarsync.Color value) {
    value.getClass();
  color_ = value;
    
    }
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeColor(com.google.android.connecteddevice.calendarsync.Color value) {
    value.getClass();
  if (color_ != null &&
        color_ != com.google.android.connecteddevice.calendarsync.Color.getDefaultInstance()) {
      color_ =
        com.google.android.connecteddevice.calendarsync.Color.newBuilder(color_).mergeFrom(value).buildPartial();
    } else {
      color_ = value;
    }
    
  }
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   */
  private void clearColor() {  color_ = null;
    
  }

  public static final int EVENTS_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<com.google.android.connecteddevice.calendarsync.Event> events_;
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.google.android.connecteddevice.calendarsync.Event> getEventsList() {
    return events_;
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  public java.util.List<? extends com.google.android.connecteddevice.calendarsync.EventOrBuilder> 
      getEventsOrBuilderList() {
    return events_;
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  @java.lang.Override
  public int getEventsCount() {
    return events_.size();
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Event getEvents(int index) {
    return events_.get(index);
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  public com.google.android.connecteddevice.calendarsync.EventOrBuilder getEventsOrBuilder(
      int index) {
    return events_.get(index);
  }
  private void ensureEventsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<com.google.android.connecteddevice.calendarsync.Event> tmp = events_;
    if (!tmp.isModifiable()) {
      events_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void setEvents(
      int index, com.google.android.connecteddevice.calendarsync.Event value) {
    value.getClass();
  ensureEventsIsMutable();
    events_.set(index, value);
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void addEvents(com.google.android.connecteddevice.calendarsync.Event value) {
    value.getClass();
  ensureEventsIsMutable();
    events_.add(value);
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void addEvents(
      int index, com.google.android.connecteddevice.calendarsync.Event value) {
    value.getClass();
  ensureEventsIsMutable();
    events_.add(index, value);
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void addAllEvents(
      java.lang.Iterable<? extends com.google.android.connecteddevice.calendarsync.Event> values) {
    ensureEventsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, events_);
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void clearEvents() {
    events_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  private void removeEvents(int index) {
    ensureEventsIsMutable();
    events_.remove(index);
  }

  public static final int ACCOUNT_NAME_FIELD_NUMBER = 5;
  private java.lang.String accountName_;
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @return The accountName.
   */
  @java.lang.Override
  public java.lang.String getAccountName() {
    return accountName_;
  }
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @return The bytes for accountName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAccountNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(accountName_);
  }
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @param value The accountName to set.
   */
  private void setAccountName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    accountName_ = value;
  }
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   */
  private void clearAccountName() {
    
    accountName_ = getDefaultInstance().getAccountName();
  }
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @param value The bytes for accountName to set.
   */
  private void setAccountNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    accountName_ = value.toStringUtf8();
    
  }

  public static final int TIME_ZONE_FIELD_NUMBER = 6;
  private com.google.android.connecteddevice.calendarsync.TimeZone timeZone_;
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   */
  @java.lang.Override
  public boolean hasTimeZone() {
    return timeZone_ != null;
  }
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.TimeZone getTimeZone() {
    return timeZone_ == null ? com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance() : timeZone_;
  }
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   */
  private void setTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  timeZone_ = value;
    
    }
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
    value.getClass();
  if (timeZone_ != null &&
        timeZone_ != com.google.android.connecteddevice.calendarsync.TimeZone.getDefaultInstance()) {
      timeZone_ =
        com.google.android.connecteddevice.calendarsync.TimeZone.newBuilder(timeZone_).mergeFrom(value).buildPartial();
    } else {
      timeZone_ = value;
    }
    
  }
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   */
  private void clearTimeZone() {  timeZone_ = null;
    
  }

  public static final int ACTION_FIELD_NUMBER = 7;
  private int action_;
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @return The enum numeric value on the wire for action.
   */
  @java.lang.Override
  public int getActionValue() {
    return action_;
  }
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @return The action.
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.UpdateAction getAction() {
    com.google.android.connecteddevice.calendarsync.UpdateAction result = com.google.android.connecteddevice.calendarsync.UpdateAction.forNumber(action_);
    return result == null ? com.google.android.connecteddevice.calendarsync.UpdateAction.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @param value The enum numeric value on the wire for action to set.
   */
  private void setActionValue(int value) {
      action_ = value;
  }
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @param value The action to set.
   */
  private void setAction(com.google.android.connecteddevice.calendarsync.UpdateAction value) {
    action_ = value.getNumber();
    
  }
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   */
  private void clearAction() {
    
    action_ = 0;
  }

  public static final int RANGE_FIELD_NUMBER = 8;
  private com.google.android.connecteddevice.calendarsync.Calendar.TimeRange range_;
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   */
  @java.lang.Override
  public boolean hasRange() {
    return range_ != null;
  }
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   */
  @java.lang.Override
  public com.google.android.connecteddevice.calendarsync.Calendar.TimeRange getRange() {
    return range_ == null ? com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.getDefaultInstance() : range_;
  }
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   */
  private void setRange(com.google.android.connecteddevice.calendarsync.Calendar.TimeRange value) {
    value.getClass();
  range_ = value;
    
    }
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeRange(com.google.android.connecteddevice.calendarsync.Calendar.TimeRange value) {
    value.getClass();
  if (range_ != null &&
        range_ != com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.getDefaultInstance()) {
      range_ =
        com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.newBuilder(range_).mergeFrom(value).buildPartial();
    } else {
      range_ = value;
    }
    
  }
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   */
  private void clearRange() {  range_ = null;
    
  }

  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.google.android.connecteddevice.calendarsync.Calendar parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.google.android.connecteddevice.calendarsync.Calendar prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Information about a calendar.
   * Based on
   * https://developer.android.com/reference/android/provider/CalendarContract.Calendars.html
   * </pre>
   *
   * Protobuf type {@code aae.calendarsync.Calendar}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.google.android.connecteddevice.calendarsync.Calendar, Builder> implements
      // @@protoc_insertion_point(builder_implements:aae.calendarsync.Calendar)
      com.google.android.connecteddevice.calendarsync.CalendarOrBuilder {
    // Construct using com.google.android.connecteddevice.calendarsync.Calendar.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The title for the calendar.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return The title.
     */
    @java.lang.Override
    public java.lang.String getTitle() {
      return instance.getTitle();
    }
    /**
     * <pre>
     * The title for the calendar.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return The bytes for title.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTitleBytes() {
      return instance.getTitleBytes();
    }
    /**
     * <pre>
     * The title for the calendar.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @param value The title to set.
     * @return This builder for chaining.
     */
    public Builder setTitle(
        java.lang.String value) {
      copyOnWrite();
      instance.setTitle(value);
      return this;
    }
    /**
     * <pre>
     * The title for the calendar.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTitle() {
      copyOnWrite();
      instance.clearTitle();
      return this;
    }
    /**
     * <pre>
     * The title for the calendar.
     * </pre>
     *
     * <code>string title = 1;</code>
     * @param value The bytes for title to set.
     * @return This builder for chaining.
     */
    public Builder setTitleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTitleBytes(value);
      return this;
    }

    /**
     * <pre>
     * The identifier for the calendar which must be unique for the device.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      return instance.getKey();
    }
    /**
     * <pre>
     * The identifier for the calendar which must be unique for the device.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      return instance.getKeyBytes();
    }
    /**
     * <pre>
     * The identifier for the calendar which must be unique for the device.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @param value The key to set.
     * @return This builder for chaining.
     */
    public Builder setKey(
        java.lang.String value) {
      copyOnWrite();
      instance.setKey(value);
      return this;
    }
    /**
     * <pre>
     * The identifier for the calendar which must be unique for the device.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearKey() {
      copyOnWrite();
      instance.clearKey();
      return this;
    }
    /**
     * <pre>
     * The identifier for the calendar which must be unique for the device.
     * </pre>
     *
     * <code>string key = 2;</code>
     * @param value The bytes for key to set.
     * @return This builder for chaining.
     */
    public Builder setKeyBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setKeyBytes(value);
      return this;
    }

    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    @java.lang.Override
    public boolean hasColor() {
      return instance.hasColor();
    }
    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Color getColor() {
      return instance.getColor();
    }
    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    public Builder setColor(com.google.android.connecteddevice.calendarsync.Color value) {
      copyOnWrite();
      instance.setColor(value);
      return this;
      }
    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    public Builder setColor(
        com.google.android.connecteddevice.calendarsync.Color.Builder builderForValue) {
      copyOnWrite();
      instance.setColor(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    public Builder mergeColor(com.google.android.connecteddevice.calendarsync.Color value) {
      copyOnWrite();
      instance.mergeColor(value);
      return this;
    }
    /**
     * <pre>
     * The display color of the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.Color color = 3;</code>
     */
    public Builder clearColor() {  copyOnWrite();
      instance.clearColor();
      return this;
    }

    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.google.android.connecteddevice.calendarsync.Event> getEventsList() {
      return java.util.Collections.unmodifiableList(
          instance.getEventsList());
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    @java.lang.Override
    public int getEventsCount() {
      return instance.getEventsCount();
    }/**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Event getEvents(int index) {
      return instance.getEvents(index);
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder setEvents(
        int index, com.google.android.connecteddevice.calendarsync.Event value) {
      copyOnWrite();
      instance.setEvents(index, value);
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder setEvents(
        int index, com.google.android.connecteddevice.calendarsync.Event.Builder builderForValue) {
      copyOnWrite();
      instance.setEvents(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder addEvents(com.google.android.connecteddevice.calendarsync.Event value) {
      copyOnWrite();
      instance.addEvents(value);
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder addEvents(
        int index, com.google.android.connecteddevice.calendarsync.Event value) {
      copyOnWrite();
      instance.addEvents(index, value);
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder addEvents(
        com.google.android.connecteddevice.calendarsync.Event.Builder builderForValue) {
      copyOnWrite();
      instance.addEvents(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder addEvents(
        int index, com.google.android.connecteddevice.calendarsync.Event.Builder builderForValue) {
      copyOnWrite();
      instance.addEvents(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder addAllEvents(
        java.lang.Iterable<? extends com.google.android.connecteddevice.calendarsync.Event> values) {
      copyOnWrite();
      instance.addAllEvents(values);
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder clearEvents() {
      copyOnWrite();
      instance.clearEvents();
      return this;
    }
    /**
     * <pre>
     * The events associated with the calendar.
     * </pre>
     *
     * <code>repeated .aae.calendarsync.Event events = 4;</code>
     */
    public Builder removeEvents(int index) {
      copyOnWrite();
      instance.removeEvents(index);
      return this;
    }

    /**
     * <pre>
     * The account used to sync the calendar to the device.
     * This typically represents an email address.
     * </pre>
     *
     * <code>string account_name = 5;</code>
     * @return The accountName.
     */
    @java.lang.Override
    public java.lang.String getAccountName() {
      return instance.getAccountName();
    }
    /**
     * <pre>
     * The account used to sync the calendar to the device.
     * This typically represents an email address.
     * </pre>
     *
     * <code>string account_name = 5;</code>
     * @return The bytes for accountName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAccountNameBytes() {
      return instance.getAccountNameBytes();
    }
    /**
     * <pre>
     * The account used to sync the calendar to the device.
     * This typically represents an email address.
     * </pre>
     *
     * <code>string account_name = 5;</code>
     * @param value The accountName to set.
     * @return This builder for chaining.
     */
    public Builder setAccountName(
        java.lang.String value) {
      copyOnWrite();
      instance.setAccountName(value);
      return this;
    }
    /**
     * <pre>
     * The account used to sync the calendar to the device.
     * This typically represents an email address.
     * </pre>
     *
     * <code>string account_name = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearAccountName() {
      copyOnWrite();
      instance.clearAccountName();
      return this;
    }
    /**
     * <pre>
     * The account used to sync the calendar to the device.
     * This typically represents an email address.
     * </pre>
     *
     * <code>string account_name = 5;</code>
     * @param value The bytes for accountName to set.
     * @return This builder for chaining.
     */
    public Builder setAccountNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAccountNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    @java.lang.Override
    public boolean hasTimeZone() {
      return instance.hasTimeZone();
    }
    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.TimeZone getTimeZone() {
      return instance.getTimeZone();
    }
    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    public Builder setTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.setTimeZone(value);
      return this;
      }
    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    public Builder setTimeZone(
        com.google.android.connecteddevice.calendarsync.TimeZone.Builder builderForValue) {
      copyOnWrite();
      instance.setTimeZone(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    public Builder mergeTimeZone(com.google.android.connecteddevice.calendarsync.TimeZone value) {
      copyOnWrite();
      instance.mergeTimeZone(value);
      return this;
    }
    /**
     * <pre>
     * The time zone for the calendar.
     * </pre>
     *
     * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
     */
    public Builder clearTimeZone() {  copyOnWrite();
      instance.clearTimeZone();
      return this;
    }

    /**
     * <pre>
     * The update action
     * </pre>
     *
     * <code>.aae.calendarsync.UpdateAction action = 7;</code>
     * @return The enum numeric value on the wire for action.
     */
    @java.lang.Override
    public int getActionValue() {
      return instance.getActionValue();
    }
    /**
     * <pre>
     * The update action
     * </pre>
     *
     * <code>.aae.calendarsync.UpdateAction action = 7;</code>
     * @param value The action to set.
     * @return This builder for chaining.
     */
    public Builder setActionValue(int value) {
      copyOnWrite();
      instance.setActionValue(value);
      return this;
    }
    /**
     * <pre>
     * The update action
     * </pre>
     *
     * <code>.aae.calendarsync.UpdateAction action = 7;</code>
     * @return The action.
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.UpdateAction getAction() {
      return instance.getAction();
    }
    /**
     * <pre>
     * The update action
     * </pre>
     *
     * <code>.aae.calendarsync.UpdateAction action = 7;</code>
     * @param value The enum numeric value on the wire for action to set.
     * @return This builder for chaining.
     */
    public Builder setAction(com.google.android.connecteddevice.calendarsync.UpdateAction value) {
      copyOnWrite();
      instance.setAction(value);
      return this;
    }
    /**
     * <pre>
     * The update action
     * </pre>
     *
     * <code>.aae.calendarsync.UpdateAction action = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearAction() {
      copyOnWrite();
      instance.clearAction();
      return this;
    }

    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    @java.lang.Override
    public boolean hasRange() {
      return instance.hasRange();
    }
    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    @java.lang.Override
    public com.google.android.connecteddevice.calendarsync.Calendar.TimeRange getRange() {
      return instance.getRange();
    }
    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    public Builder setRange(com.google.android.connecteddevice.calendarsync.Calendar.TimeRange value) {
      copyOnWrite();
      instance.setRange(value);
      return this;
      }
    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    public Builder setRange(
        com.google.android.connecteddevice.calendarsync.Calendar.TimeRange.Builder builderForValue) {
      copyOnWrite();
      instance.setRange(builderForValue.build());
      return this;
    }
    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    public Builder mergeRange(com.google.android.connecteddevice.calendarsync.Calendar.TimeRange value) {
      copyOnWrite();
      instance.mergeRange(value);
      return this;
    }
    /**
     * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
     */
    public Builder clearRange() {  copyOnWrite();
      instance.clearRange();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:aae.calendarsync.Calendar)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.google.android.connecteddevice.calendarsync.Calendar();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "title_",
            "key_",
            "color_",
            "events_",
            com.google.android.connecteddevice.calendarsync.Event.class,
            "accountName_",
            "timeZone_",
            "action_",
            "range_",
          };
          java.lang.String info =
              "\u0000\b\u0000\u0000\u0001\b\b\u0000\u0001\u0000\u0001\u0208\u0002\u0208\u0003\t" +
              "\u0004\u001b\u0005\u0208\u0006\t\u0007\f\b\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.google.android.connecteddevice.calendarsync.Calendar> parser = PARSER;
        if (parser == null) {
          synchronized (com.google.android.connecteddevice.calendarsync.Calendar.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.google.android.connecteddevice.calendarsync.Calendar>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:aae.calendarsync.Calendar)
  private static final com.google.android.connecteddevice.calendarsync.Calendar DEFAULT_INSTANCE;
  static {
    Calendar defaultInstance = new Calendar();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Calendar.class, defaultInstance);
  }

  public static com.google.android.connecteddevice.calendarsync.Calendar getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Calendar> PARSER;

  public static com.google.protobuf.Parser<Calendar> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

