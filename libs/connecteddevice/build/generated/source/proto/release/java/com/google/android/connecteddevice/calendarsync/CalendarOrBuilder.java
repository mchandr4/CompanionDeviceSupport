// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: com/google/android/connecteddevice/calendarsync/common/update.proto

package com.google.android.connecteddevice.calendarsync;

public interface CalendarOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aae.calendarsync.Calendar)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The title.
   */
  java.lang.String getTitle();
  /**
   * <pre>
   * The title for the calendar.
   * </pre>
   *
   * <code>string title = 1;</code>
   * @return The bytes for title.
   */
  com.google.protobuf.ByteString
      getTitleBytes();

  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The key.
   */
  java.lang.String getKey();
  /**
   * <pre>
   * The identifier for the calendar which must be unique for the device.
   * </pre>
   *
   * <code>string key = 2;</code>
   * @return The bytes for key.
   */
  com.google.protobuf.ByteString
      getKeyBytes();

  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   * @return Whether the color field is set.
   */
  boolean hasColor();
  /**
   * <pre>
   * The display color of the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.Color color = 3;</code>
   * @return The color.
   */
  com.google.android.connecteddevice.calendarsync.Color getColor();

  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  java.util.List<com.google.android.connecteddevice.calendarsync.Event> 
      getEventsList();
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  com.google.android.connecteddevice.calendarsync.Event getEvents(int index);
  /**
   * <pre>
   * The events associated with the calendar.
   * </pre>
   *
   * <code>repeated .aae.calendarsync.Event events = 4;</code>
   */
  int getEventsCount();

  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @return The accountName.
   */
  java.lang.String getAccountName();
  /**
   * <pre>
   * The account used to sync the calendar to the device.
   * This typically represents an email address.
   * </pre>
   *
   * <code>string account_name = 5;</code>
   * @return The bytes for accountName.
   */
  com.google.protobuf.ByteString
      getAccountNameBytes();

  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   * @return Whether the timeZone field is set.
   */
  boolean hasTimeZone();
  /**
   * <pre>
   * The time zone for the calendar.
   * </pre>
   *
   * <code>.aae.calendarsync.TimeZone time_zone = 6;</code>
   * @return The timeZone.
   */
  com.google.android.connecteddevice.calendarsync.TimeZone getTimeZone();

  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @return The enum numeric value on the wire for action.
   */
  int getActionValue();
  /**
   * <pre>
   * The update action
   * </pre>
   *
   * <code>.aae.calendarsync.UpdateAction action = 7;</code>
   * @return The action.
   */
  com.google.android.connecteddevice.calendarsync.UpdateAction getAction();

  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   * @return Whether the range field is set.
   */
  boolean hasRange();
  /**
   * <code>.aae.calendarsync.Calendar.TimeRange range = 8;</code>
   * @return The range.
   */
  com.google.android.connecteddevice.calendarsync.Calendar.TimeRange getRange();
}
